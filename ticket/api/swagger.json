{
    "swagger": "2.0",
    "info": {
        "description": "This is a Reference Implementation (RI) built by AMKB Cloud using MagicDraw, Swagger & Nomos RuleX. You can find out more about AMKB Cloud \n at <a href=\"http://amkbcloud.com\">http://amkbcloud.com</a>, MagicDraw \n at <a href=\"http://www.nomagic.com\">http://www.nomagic.com</a>, Swagger at <a href=\"http://swagger.io\">http://swagger.io</a>, and Nomos RuleX at <a href=\"http://nomos-software.com\">http://nomos-software.com</a>",
        "version": "15.5.0",
        "title": "AMKB Cloud RI - TMF Ticket Management REST API",
        "termsOfService": "http://amkbcloud.com/terms",
        "contact": {
            "name": "support@amkbcloud.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "host": "ticket-148919.appspot.com",
    "basePath": "/ticketManagement",
    "schemes": [
        "https",
		"http"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/ticket": {
            "x-swagger-router-controller": "ticket",
            "post": {
                "tags": [
                    "ticket"
                ],
                "summary": "Create ticket",
                "description": "This operation is used to create a ticket.",
                "operationId": "createTicket",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "ticket",
                        "description": "ticket to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateTicket"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Ticket"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "405": {
                        "description": "Validation exception",
                        "schema": {
                            "$ref": "#/definitions/RuleXValidation"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "ticket"
                ],
                "summary": "Retrieve tickets",
                "description": "Retrieval of a ticket or of a collection of tickets depending on query parameters.",
                "operationId": "retrieveTickets",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Space separated fields to display in response - id href creationDate (default fields)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "severity",
                        "description": "For filtering: The severity of the trouble. It can be for example: Minor, Major, Critical.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "description": "For filtering: Type of ticket - trouble, location, meeting, etc.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "description": "For filtering: The status of the trouble - submitted, rejected, acknowledged, in progress pending, in progress held, cancelled, resolved, closed.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "targetResolutionDate",
                        "description": "For filtering: the target resolution date.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Ticket"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Ticket not found"
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/ticket/{id}": {
            "x-swagger-router-controller": "ticket",
            "get": {
                "tags": [
                    "ticket"
                ],
                "summary": "Retrieve ticket",
                "description": "Retrieval of a ticket.",
                "operationId": "retrieveTicket",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of ticket that needs to be retrieved",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Query parameter fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Ticket"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Ticket not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "ticket"
                ],
                "summary": "Fully update ticket",
                "description": "This operation is used to completely update the representation of a ticket.",
                "operationId": "fullyUpdateTicket",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of ticket that needs to be fully updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "ticket",
                        "description": "ticket to be fully updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateTicket"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Ticket"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Ticket not found"
                    },
                    "405": {
                        "description": "Validation exception",
                        "schema": {
                            "$ref": "#/definitions/RuleXValidation"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "ticket"
                ],
                "summary": "Partially update ticket",
                "description": "This operation is used to partially update the representation of a ticket. Patching of status is only allowed to transition: from 'Resolved' to 'Closed'; from Acknowledged' or 'InProgress' to 'Cancelled'. Patching of relatedParties[], relatedObjects[] or notes[] replaces previous value set.",
                "operationId": "partiallyUpdateTicket",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of ticket that needs to be partially updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "ticket",
                        "description": "ticket to be partially updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateTicket"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Ticket"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Ticket not found"
                    },
                    "405": {
                        "description": "Validation exception",
                        "schema": {
                            "$ref": "#/definitions/RuleXValidation"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "ticket"
                ],
                "summary": "Delete ticket",
                "description": "Delete a ticket from a collection of tickets.",
                "operationId": "deleteTicket",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of ticket that needs to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Ticket not found"
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hub": {
            "x-swagger-router-controller": "hub",
            "post": {
                "tags": [
                    "hub"
                ],
                "summary": "Create hub",
                "description": "This operation is used to register a listener to be notified of the following events: create, update and delete.",
                "operationId": "createHub",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "hub",
                        "description": "hub to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Hub"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Hub"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "405": {
                        "description": "Validation exception",
                        "schema": {
                            "$ref": "#/definitions/RuleXValidation"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "hub"
                ],
                "summary": "Retrieve hubs",
                "description": "Retrieval of a listener or of a collection of listeners.",
                "operationId": "retrieveHubs",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Hub"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Hub not found"
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hub/{id}": {
            "x-swagger-router-controller": "hub",
            "delete": {
                "tags": [
                    "hub"
                ],
                "summary": "Delete hub",
                "description": "This operation is used to unregister a listener.",
                "operationId": "deleteHub",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of hub that needs to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Hub Listener not found"
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "hub"
                ],
                "summary": "Retrieve hub",
                "description": "Retrieval of a listener.",
                "operationId": "retrieveHub",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of hub that needs to be retrieved",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Query parameter fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Hub"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Hub Listener not found"
                    }
                }
            }
        }
    },
    "definitions": {
        "TicketStateChangeNotification": {
            "description": "Use to communicate that decision was made to accept customer complaint and withdraw disputed charges. Also used to communicate that call with customer clarifies that dispute relates to another invoice than initially understood.",
            "required": [
                "event",
                "eventType",
                "eventTime"
            ],
            "properties": {
                "event": {
                    "description": "Reference to ticket to be sent to listener in event notification.",
                    "$ref": "#/definitions/TicketEvent"
                },
                "eventType": {
                    "description": "Type of notification to be sent: update, state change, information required, clearance request.",
                    "type": "string"
                },
                "eventTime": {
                    "description": "Time notification event was sent.",
                    "type": "string",
                    "format": "date-time"
                },
                "eventId": {
                    "description": "Unique identifier of notification event.",
                    "type": "string"
                }
            }
        },
        "TicketEvent": {
            "description": "Reference to ticket to be sent to listener in event notification.",
            "required": [
                "ticket"
            ],
            "properties": {
                "ticket": {
                    "description": "Ticket to be sent to listener in notification.",
                    "$ref": "#/definitions/Ticket"
                }
            }
        },
        "TicketInformationRequiredNotification": {
            "description": "Communicate with customer that additional information is required before being able to proceed. For example, appointment information is required.",
            "required": [
                "event",
                "eventType",
                "eventTime"
            ],
            "properties": {
                "event": {
                    "description": "Reference to ticket to be sent to listener in event notification.",
                    "$ref": "#/definitions/TicketEvent"
                },
                "eventType": {
                    "description": "Type of notification to be sent: update, state change, information required, clearance request.",
                    "type": "string"
                },
                "eventTime": {
                    "description": "Time notification event was sent.",
                    "type": "string",
                    "format": "date-time"
                },
                "eventId": {
                    "description": "Unique identifier of notification event.",
                    "type": "string"
                }
            }
        },
        "TicketClearanceRequestNotification": {
            "description": "As a result of disputed charges withdrawal, ticket is assumed to be resolved. Notification asks Ticket requester to confirm resolution (by setting status to ",
            "required": [
                "event",
                "eventType",
                "eventTime"
            ],
            "properties": {
                "event": {
                    "description": "Reference to ticket to be sent to listener in event notification.",
                    "$ref": "#/definitions/TicketEvent"
                },
                "eventType": {
                    "description": "Type of notification to be sent: update, state change, information required, clearance request.",
                    "type": "string"
                },
                "eventTime": {
                    "description": "Time notification event was sent.",
                    "type": "string",
                    "format": "date-time"
                },
                "eventId": {
                    "description": "Unique identifier of notification event.",
                    "type": "string"
                }
            }
        },
        "TicketlUpdateNotification": {
            "description": "Notify that ticket has been updated",
            "required": [
                "event",
                "eventType",
                "eventTime"
            ],
            "properties": {
                "event": {
                    "description": "Reference to ticket to be sent to listener in event notification.",
                    "$ref": "#/definitions/TicketEvent"
                },
                "eventType": {
                    "description": "Type of notification to be sent: update, state change, information required, clearance request.",
                    "type": "string"
                },
                "eventTime": {
                    "description": "Time notification event was sent.",
                    "type": "string",
                    "format": "date-time"
                },
                "eventId": {
                    "description": "Unique identifier of notification event.",
                    "type": "string"
                }
            }
        },
        "Note": {
            "description": "Extra-information about an entity (e.g. useful to add extra delivery information that could be useful for a human process : a digicode access to a building, ...).",
            "properties": {
                "text": {
                    "description": "Text of the note",
                    "type": "string"
                },
                "date": {
                    "description": "Date of the note",
                    "type": "string",
                    "format": "date-time"
                },
                "author": {
                    "description": "Author of the note",
                    "type": "string"
                }
            }
        },
        "RelatedPartyRef": {
            "description": "Defines party or partyRole linked to a specific entity. Used to represent an association between a resource and a party or role object playing a role regarding that object.",
            "required": [
                "id",
                "href"
            ],
            "properties": {
                "id": {
                    "description": "Identifier of the related party.",
                    "type": "string"
                },
                "href": {
                    "description": "Reference to the related party",
                    "type": "string"
                },
                "role": {
                    "description": "Role of the related party",
                    "type": "string"
                }
            }
        },
        "Hub": {
            "description": "",
            "required": [
                "id",
                "callback",
                "query"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "callback": {
                    "type": "string"
                },
                "query": {
                    "type": "string"
                }
            }
        },
        "Error": {
            "description": "Error message",
            "required": [
                "code",
                "message"
            ],
            "properties": {
                "code": {
                    "description": "Error code",
                    "type": "integer",
                    "format": "int32"
                },
                "message": {
                    "description": "Error message",
                    "type": "string"
                }
            }
        },
        "RuleXValidation": {
            "description": "Response structure returned by RuleX Validation service",
            "required": [
                "validationDate",
                "validationReport"
            ],
            "properties": {
                "validationDate": {
                    "description": "Validation date",
                    "type": "string"
                },
                "validationReport": {
                    "description": "Validation report",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/RuleXValidationReport"
                    }
                }
            }
        },
        "RuleXValidationReport": {
            "description": "Report returned by RuleX Validation service",
            "required": [
                "message",
                "lineNumber"
            ],
            "properties": {
                "message": {
                    "description": "Validation message",
                    "type": "string"
                },
                "data": {
                    "description": "Validation data",
                    "type": "array",
                    "minItems": 0,
                    "items": {
                        "$ref": "#/definitions/RuleXValidationReportData"
                    }
                },
                "lineNumber": {
                    "description": "Validation issue line number",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "RuleXValidationReportData": {
            "description": "",
            "required": [
                "characteristic",
                "characteristicValue"
            ],
            "properties": {
                "characteristic": {
                    "description": "Validation issue characteristic",
                    "type": "string"
                },
                "characteristicValue": {
                    "description": "Validation issue characteristic value",
                    "type": "string"
                }
            }
        },
        "Notification": {
            "description": "Represents types of notifications that can be sent to registered listeners.",
            "required": [
                "eventType",
                "eventTime"
            ],
            "properties": {
                "eventType": {
                    "description": "Type of notification to be sent: update, state change, information required, clearance request.",
                    "type": "string"
                },
                "eventTime": {
                    "description": "Time notification event was sent.",
                    "type": "string",
                    "format": "date-time"
                },
                "eventId": {
                    "description": "Unique identifier of notification event.",
                    "type": "string"
                }
            }
        },
        "RelatedObject": {
            "description": "Objects linked with a ticket",
            "properties": {
                "href": {
                    "description": "Reference to the related object",
                    "type": "string"
                },
                "involvement": {
                    "description": "Involvement of the related object to this ticket",
                    "type": "string"
                }
            }
        },
        "Ticket": {
            "description": "",
            "required": [
                "id",
                "href",
                "creationDate"
            ],
            "properties": {
                "id": {
                    "description": "Unique identifier of the ticket",
                    "type": "string"
                },
                "href": {
                    "description": "Reference to the ticket",
                    "type": "string"
                },
                "creationDate": {
                    "description": "The date on which the ticket was created.",
                    "type": "string",
                    "format": "date-time"
                },
                "status": {
                    "description": "The current status of the ticket.",
                    "type": "string",
                    "default": "Acknowledged",
                    "enum": [
                        "Submitted",
                        "Rejected",
                        "Acknowledged",
                        "InProgressHeld",
                        "InProgressPending",
                        "Resolved",
                        "Closed",
                        "Cancelled"
                    ]
                },
                "statusChangeReason": {
                    "description": "The reason of state change",
                    "type": "string"
                },
                "statusChangeDate": {
                    "description": "The date of status change",
                    "type": "string",
                    "format": "date-time"
                },
                "resolutionDate": {
                    "description": "The date on which the issue being managed by the ticket was brought to its desired condition.",
                    "type": "string",
                    "format": "date-time"
                },
                "description": {
                    "description": "Description of what the ticket is to be used to manage -trouble, location, communication, meeting, etc.",
                    "type": "string"
                },
                "severity": {
                    "description": "The severity of the trouble. It can be for example: minor, major, critical",
                    "type": "string"
                },
                "type": {
                    "description": "Type of ticket - trouble, location, meeting, etc.",
                    "type": "string"
                },
                "correlationId": {
                    "description": "Additional identifier coming from an external system",
                    "type": "string"
                },
                "targetResolutionDate": {
                    "description": "Foreseen ticket resolution date",
                    "type": "string",
                    "format": "date-time"
                },
                "note": {
                    "description": "Extra-information about the trouble ticket",
                    "type": "array",
                    "minItems": 0,
                    "items": {
                        "$ref": "#/definitions/Note"
                    }
                },
                "relatedParty": {
                    "type": "array",
                    "minItems": 0,
                    "items": {
                        "$ref": "#/definitions/RelatedPartyRef"
                    }
                },
                "relatedObject": {
                    "type": "array",
                    "minItems": 0,
                    "items": {
                        "$ref": "#/definitions/RelatedObject"
                    }
                }
            }
        },
        "CreateTicket": {
            "description": "",
            "required": [
                "description",
                "severity",
                "type"
            ],
            "properties": {
                "description": {
                    "description": "Description of what the ticket is to be used to manage - trouble, location, communication, meeting, etc.",
                    "type": "string"
                },
                "severity": {
                    "description": "The severity of the trouble. It can be for example: Minor, Major, Critical",
                    "type": "string",
                    "default": "Minor",
                    "enum": [
                        "Minor",
                        "Major",
                        "Critical"
                    ]
                },
                "type": {
                    "description": "Type of ticket - trouble, location, meeting, etc.",
                    "type": "string"
                },
                "correlationId": {
                    "description": "Additional identifier coming from an external system",
                    "type": "string"
                },
                "targetResolutionDate": {
                    "description": "Foreseen ticket resolution date",
                    "type": "string",
                    "format": "date-time"
                },
                "note": {
                    "description": "Extra-information about the trouble ticket",
                    "type": "array",
                    "minItems": 0,
                    "items": {
                        "$ref": "#/definitions/Note"
                    }
                },
                "relatedParty": {
                    "type": "array",
                    "minItems": 0,
                    "items": {
                        "$ref": "#/definitions/RelatedPartyRef"
                    }
                },
                "relatedObject": {
                    "type": "array",
                    "minItems": 0,
                    "items": {
                        "$ref": "#/definitions/RelatedObject"
                    }
                }
            }
        },
        "UpdateTicket": {
            "description": "",
            "properties": {
                "status": {
                    "description": "The current status of the ticket.",
                    "type": "string",
                    "default": "Acknowledged",
                    "enum": [
                        "Submitted",
                        "Rejected",
                        "Acknowledged",
                        "InProgressHeld",
                        "InProgressPending",
                        "Resolved",
                        "Closed",
                        "Cancelled"
                    ]
                },
                "statusChangeReason": {
                    "description": "The reason of state change",
                    "type": "string"
                },
                "statusChangeDate": {
                    "description": "The date of status change",
                    "type": "string",
                    "format": "date-time"
                },
                "resolutionDate": {
                    "description": "The date on which the issue being managed by the ticket was brought to its desired condition.",
                    "type": "string",
                    "format": "date-time"
                },
                "description": {
                    "description": "Description of what the ticket is to be used to manage -trouble, location, communication, meeting, etc.",
                    "type": "string"
                },
                "severity": {
                    "description": "The severity of the trouble. It can be for example: minor, major, critical",
                    "type": "string"
                },
                "type": {
                    "description": "Type of ticket - trouble, location, meeting, etc.",
                    "type": "string"
                },
                "correlationId": {
                    "description": "Additional identifier coming from an external system",
                    "type": "string"
                },
                "targetResolutionDate": {
                    "description": "Foreseen ticket resolution date",
                    "type": "string",
                    "format": "date-time"
                },
                "note": {
                    "description": "Extra-information about the trouble ticket",
                    "type": "array",
                    "minItems": 0,
                    "items": {
                        "$ref": "#/definitions/Note"
                    }
                },
                "relatedParty": {
                    "type": "array",
                    "minItems": 0,
                    "items": {
                        "$ref": "#/definitions/RelatedPartyRef"
                    }
                },
                "relatedObject": {
                    "type": "array",
                    "minItems": 0,
                    "items": {
                        "$ref": "#/definitions/RelatedObject"
                    }
                }
            }
        }
    }
}